{"version":3,"sources":["layouts/components/Navbar/UserInfo.jsx","layouts/components/Navigation/index.js","layouts/components/Navbar/index.jsx","layouts/components/Menu/index.jsx","layouts/BasicLayout/index.jsx"],"names":["menu","Item","UserInfo","userInfo","this","props","className","overlay","onClick","e","preventDefault","name","DownOutlined","Component","connect","state","getIn","memo","breadcrumbNameMap","flattenRoutes","arr","routesMap","map","cur","Array","isArray","routes","withRouter","location","pathSnippets","pathname","split","filter","i","extraBreadcrumbItems","_","idx","url","slice","join","to","breadcrumbItems","HomeOutlined","concat","Header","Layout","Navbar","toggle","collapsed","setState","callback","style","padding","React","createElement","MenuUnfoldOutlined","MenuFoldOutlined","SiderMenu","useState","menuTreeNode","setMenuTreeNode","currentSelectMenu","setCurrentSelectMenu","route","renderMenu","data","item","SubMenu","title","meta","icon","MailOutlined","path","replace","useEffect","treeNode","Sider","trigger","collapsible","theme","mode","defaultOpenKeys","selectedKeys","value","key","BasicLayout","setCollapsed","msg","Content","renderRoutes"],"mappings":"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","file":"static/js/12.f8e95f4e.chunk.js","sourcesContent":["import React, { memo, Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { Menu, Dropdown } from 'antd'\nimport { DownOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux'\n\nconst menu = (\n  <Menu>\n    <Menu.Item key=\"1\">1st menu item</Menu.Item>\n    <Menu.Item key=\"2\">2nd menu item</Menu.Item>\n    <Menu.Item key=\"3\">3rd menu item</Menu.Item>\n  </Menu>\n);\n\nclass UserInfo extends Component{\n  // constructor(props) {\n  //   super(props);\n  // }\n  render () {\n    const { userInfo } = this.props;\n    return (\n      <div className=\"user-info-wrap\">\n        <Dropdown overlay={ menu }>\n          <span className=\"ant-dropdown-link\" onClick={ e => e.preventDefault() }>\n            {userInfo.name} <DownOutlined />\n          </span>\n        </Dropdown>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  userInfo: state.getIn([ 'user', 'userInfo' ])\n})\n\nUserInfo.propTypes = {\n  userInfo: PropTypes.object.isRequired\n}\n\nexport default connect(mapStateToProps)(memo(UserInfo))\n","import * as React from 'react'\nimport {  Link, withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Breadcrumb } from 'antd';\nimport routes from '@/router';\nimport { HomeOutlined } from '@ant-design/icons';\n\nconst flattenRoutes = (arr, routesMap) => {\n  arr.map(cur => {\n    if (!routesMap[ cur[ 'path' ] ]) {\n      routesMap[ cur[ 'path' ] ] = cur[ 'name' ] || ''\n    }\n    if (Array.isArray(cur.routes)){\n      flattenRoutes(cur.routes, routesMap)\n    } \n    return cur\n  })\n  return routesMap\n}\n\nconst breadcrumbNameMap = flattenRoutes(routes, {})\n\nconst Navigation = ({ location, ...props }) => {\n  // const { location: { pathname = '' } } = props;\n  const pathSnippets = location.pathname.split('/').filter(i => i);\n  const extraBreadcrumbItems = pathSnippets.map((_, idx) => {\n    const url = `/${ pathSnippets.slice(0, idx + 1).join('/') }`;\n    if (!idx) return ''\n    return (\n      <Breadcrumb.Item key={ url }>\n        <Link to={ url }>\n          {breadcrumbNameMap[ url ]}\n        </Link>\n      </Breadcrumb.Item>\n    );\n  });\n  const breadcrumbItems = [\n    <Breadcrumb.Item key=\"home\"><Link to=\"/\"><HomeOutlined />首页</Link></Breadcrumb.Item>\n  ].concat(extraBreadcrumbItems);\n  return (\n    <Breadcrumb>\n      {breadcrumbItems}\n    </Breadcrumb>\n  )\n}\n\nNavigation.propTypes = {\n  location: PropTypes.object.isRequired\n}\n\nexport default withRouter(Navigation)\n","import React, { memo, Component } from 'react'\nimport PropTypes from 'prop-types';\n\nimport { Layout } from 'antd';\n\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined\n} from '@ant-design/icons';\n\nimport UserInfo from './UserInfo'\nimport Navigation from '../Navigation'\n\nimport './index.less'\n\nconst { Header } = Layout;\n\nclass Navbar extends Component{\n  constructor (props) {\n    super(props)\n    this.state = {\n      collapsed: false\n    }\n  }\n\n  toggle = () => {\n    const { collapsed } = this.state\n    this.setState({\n      collapsed: !collapsed\n    });\n    this.props.callback(!collapsed)\n  }\n  render () {\n    return (\n      <Header className=\"site-layout-background\" style={ { padding: 0 } }>\n        {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n          className: 'trigger',\n          onClick: this.toggle\n        })}\n        <Navigation { ...this.props }/>\n        <UserInfo />\n      </Header>\n    )\n  }\n}\n\nNavbar.propTypes = {\n  callback: PropTypes.func.isRequired\n}\n\nexport default memo(Navbar)\n","import React, { memo, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Layout, Menu } from 'antd';\nimport { MailOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\n\nconst SiderMenu = (props) =>{\n  const [ menuTreeNode, setMenuTreeNode ] = useState(null);\n\n  const [ currentSelectMenu, setCurrentSelectMenu ] = useState([\n    '/authorized/overview/analysis'\n  ]);\n  \n  const { route: { routes = [] }, collapsed = false } = props;\n\n  const renderMenu = (data) => {\n    return data.map((item) => {\n      if (item.routes) {\n        return (\n          <Menu.SubMenu\n            key={ item.path }\n            title={ item.meta.name }\n            icon={ <MailOutlined /> }\n          >\n            {renderMenu(item.routes)}\n          </Menu.SubMenu>\n        );\n      }\n      if (item[ 'hidden' ]) return null;\n      return (\n        <Menu.Item key={ item.path } title={ item.meta.name }>\n          <Link to={ item.path } replace>\n            {item.meta.name}\n          </Link>\n        </Menu.Item>\n      );\n    });\n  };\n\n  const handleSelectMenu = (value) => {\n    setCurrentSelectMenu([ value.key ]);\n  };\n\n  useEffect(() => {\n    const treeNode = renderMenu(routes);\n    setMenuTreeNode(treeNode);\n  }, []);\n\n  return (\n    <Layout.Sider trigger={ null } collapsible collapsed={ collapsed }>\n      <div className=\"logo\" />\n      <Menu\n        theme=\"dark\"\n        mode=\"inline\"\n        defaultOpenKeys={ currentSelectMenu }\n        selectedKeys={ currentSelectMenu }\n        onClick={ handleSelectMenu }\n      >\n        {menuTreeNode}\n      </Menu>\n    </Layout.Sider>\n  );\n};\n\nSiderMenu.propTypes = {\n  route: PropTypes.object.isRequired,\n  collapsed: PropTypes.bool.isRequired\n}\n\nexport default memo(SiderMenu)\n","import React, { memo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { renderRoutes } from '@/utils/renderRoutes';\nimport { Layout } from 'antd';\n\nimport { Navbar, SiderMenu } from './../components';\n\nconst BasicLayout = (props) => {\n  const [ collapsed, setCollapsed ] = useState(false);\n  const { route: { routes = [] } } = props\n\n  const callback = (msg) => {\n    setCollapsed(msg);\n  };\n\n  return (\n    <Layout>\n      <SiderMenu collapsed={ collapsed } { ...props } />\n      <Layout className=\"site-layout\">\n        <Navbar callback={ callback } { ...props } />\n        <Layout.Content className=\"site-layout-background\">\n          {renderRoutes(routes)}\n        </Layout.Content>\n      </Layout>\n    </Layout>\n  );\n};\n// console.info('BasicLayout', BasicLayout)\nBasicLayout.propTypes = {\n  route: PropTypes.object.isRequired\n}\n\nexport default memo(BasicLayout)\n"],"sourceRoot":""}